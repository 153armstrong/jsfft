{"name":"Jsfft","tagline":"Small, efficient Javascript FFT implementation","body":"# jsfft\r\n\r\nSmall, efficient Javascript FFT implementation for node or the browser.\r\n\r\n## Usage\r\n\r\nJSFFT ships with a **complex_array** and a **fft** module.\r\n\r\n```javascript\r\nvar data = new complex_array.ComplexArray(512)\r\n// Use the in-place mapper to populate the data.\r\ndata.map(function(value, i, n) {\r\n  value.real = (i > n/3 && i < 2*n/3) ? 1 : 0\r\n})\r\n```\r\n\r\nIncluding the **fft** module attaches FFT methods to ComplexArray:\r\n\r\n```javascript\r\nvar frequencies = data.FFT()\r\n// Implement a low-pass filter using the in-place mapper.\r\nfrequencies.map(function(frequency, i, n) {\r\n  if (i > n/5 && i < 4*n/5) {\r\n    frequency.real = 0\r\n    frequency.imag = 0\r\n  }\r\n})\r\n```\r\n\r\nAlternatively, frequency-space filters can be implemented via the frequencyMap:\r\n\r\n```javascript\r\nvar filtered = data.frequencyMap(function(frequency, i, n) {\r\n  if (i > n/5 && i < 4*n/5) {\r\n    frequency.real = 0\r\n    frequency.imag = 0\r\n  }\r\n})\r\n```\r\n\r\n## Other Implementations\r\n\r\n[DSP](https://github.com/corbanbrook/dsp.js) is a full featured Digital Signal\r\nProcessing library in JS which includes a JS FFT implementation.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}